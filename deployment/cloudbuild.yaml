options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Build Website Service (Nuxt.js)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/beiqi-website:${SHORT_SHA}', '-f', './services/website/Dockerfile', '.']

  # Build Management Panel (Vue.js)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/beiqi-management:${SHORT_SHA}', '-f', './services/management-panel/Dockerfile', '.']

  # Build Admin API Service (Java Spring Boot)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/beiqi-admin-api:${SHORT_SHA}', '-f', './services/admin-api/Dockerfile', '.']

  # Build Web API Service (Java Spring Boot)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/beiqi-web-api:${SHORT_SHA}', '-f', './services/web-api/Dockerfile', '.']

  # Build GeoIP Service (Node.js Express)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/beiqi-geoip:${SHORT_SHA}', '-f', './services/geoip/Dockerfile', '.']

  # Push all images to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-website:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-management:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-admin-api:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-web-api:${SHORT_SHA}']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-geoip:${SHORT_SHA}']

  # Create latest tags
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/beiqi-website:${SHORT_SHA}', 'gcr.io/${PROJECT_ID}/beiqi-website:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/beiqi-management:${SHORT_SHA}', 'gcr.io/${PROJECT_ID}/beiqi-management:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/beiqi-admin-api:${SHORT_SHA}', 'gcr.io/${PROJECT_ID}/beiqi-admin-api:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/beiqi-web-api:${SHORT_SHA}', 'gcr.io/${PROJECT_ID}/beiqi-web-api:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['tag', 'gcr.io/${PROJECT_ID}/beiqi-geoip:${SHORT_SHA}', 'gcr.io/${PROJECT_ID}/beiqi-geoip:latest']

  # Push latest tags
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-website:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-management:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-admin-api:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-web-api:latest']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/${PROJECT_ID}/beiqi-geoip:latest']

  # Update docker-compose.yml with image references
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        sed -i "s|build:|image: gcr.io/${PROJECT_ID}/beiqi-website:latest|g" docker-compose.yml
        sed -i "s|context: ./services/website||g" docker-compose.yml
        sed -i "s|build:|image: gcr.io/${PROJECT_ID}/beiqi-management:latest|g" docker-compose.yml
        sed -i "s|context: ./services/management-panel||g" docker-compose.yml
        sed -i "s|build:|image: gcr.io/${PROJECT_ID}/beiqi-admin-api:latest|g" docker-compose.yml
        sed -i "s|context: ./services/admin-api||g" docker-compose.yml
        sed -i "s|build:|image: gcr.io/${PROJECT_ID}/beiqi-web-api:latest|g" docker-compose.yml
        sed -i "s|context: ./services/web-api||g" docker-compose.yml
        sed -i "s|build:|image: gcr.io/${PROJECT_ID}/beiqi-geoip:latest|g" docker-compose.yml
        sed -i "s|context: ./services/geoip||g" docker-compose.yml

  # Copy deployment files to GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: ['-m', 'cp', '-r', './*', 'gs://${PROJECT_ID}-beiqi-deploy/']

  # Deploy to VM using Cloud Build's SSH capabilities
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Create a temporary SSH key
        ssh-keygen -t rsa -N "" -f /tmp/ssh-key
        
        # Source environment variables
        source .env || echo "Warning: .env file not found, using default values"
        VM_NAME=${VM_NAME:-beiqi-vm}
        VM_ZONE=${VM_ZONE:-us-central1-a}
        
        # Add the public key to the VM's metadata
        gcloud compute instances add-metadata ${VM_NAME} --zone=${VM_ZONE} --metadata-from-file ssh-keys=<(echo "cloudbuild:$(cat /tmp/ssh-key.pub)")
        
        # Wait for SSH to become available
        sleep 10
        
        # Create deployment directory on VM
        gcloud compute ssh cloudbuild@${VM_NAME} --zone=${VM_ZONE} --quiet --ssh-key-file=/tmp/ssh-key --command="mkdir -p /tmp/beiqi-deploy"
        
        # Copy deployment files to VM
        gcloud compute scp --zone=${VM_ZONE} --quiet --ssh-key-file=/tmp/ssh-key --recurse ./* cloudbuild@${VM_NAME}:/tmp/beiqi-deploy/
        
        # Execute setup script on VM
        gcloud compute ssh cloudbuild@${VM_NAME} --zone=${VM_ZONE} --quiet --ssh-key-file=/tmp/ssh-key --command="cd /tmp/beiqi-deploy && bash setup-vm.sh"
        
        # Clean up the temporary SSH key from VM metadata
        gcloud compute instances remove-metadata ${VM_NAME} --zone=${VM_ZONE} --keys=ssh-keys

images:
  - 'gcr.io/${PROJECT_ID}/beiqi-website:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/beiqi-website:latest'
  - 'gcr.io/${PROJECT_ID}/beiqi-management:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/beiqi-management:latest'
  - 'gcr.io/${PROJECT_ID}/beiqi-admin-api:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/beiqi-admin-api:latest'
  - 'gcr.io/${PROJECT_ID}/beiqi-web-api:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/beiqi-web-api:latest'
  - 'gcr.io/${PROJECT_ID}/beiqi-geoip:${SHORT_SHA}'
  - 'gcr.io/${PROJECT_ID}/beiqi-geoip:latest'

timeout: 3600s
